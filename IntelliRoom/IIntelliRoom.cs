using System;
namespace IntelliRoom
{
    public interface IIntelliRoom
    {
        void AddAction(string nameEvent, string command);
        void AddGrammar(System.Speech.Recognition.Grammar grammar);
        void AddGrammarList(System.Collections.Generic.List<string> list, string context);
        void AddTask(string command, DateTime date);
        void AddTask(string command, int day, int month, int year, int hour, int minute);
        void AddTask(string command, int hour, int minute);
        void ChangePrecisionRecognizer(int precision);
        void ChangeRangeInTemperatureEvent(int min, int max);
        void ChangeVolume(int volume);
        string Condition(string city);
        bool ConfigCameraGetCalculeFace();
        bool ConfigCameraGetCalculeIluminance();
        bool ConfigCameraGetCalculeMovement();
        int ConfigCameraGetIluminanceEvent();
        int ConfigCameraGetIsMovement();
        int ConfigCameraGetProcessMilliseconds();
        bool ConfigCameraGetSaveFaces();
        bool ConfigCameraGetSaveMovement();
        void ConfigCameraSetCalculeFace(bool calculeFaces);
        void ConfigCameraSetCalculeIluminance(bool calculeIluminance);
        void ConfigCameraSetCalculeMovement(bool calculeMovement);
        void ConfigCameraSetIluminanceEvent(int iluminance);
        void ConfigCameraSetIsMovement(int movement);
        void ConfigCameraSetProcessMilliseconds(int millis);
        void ConfigCameraSetSaveFaces(bool saveFaces);
        void ConfigCameraSetSaveMovement(bool saveMovement);
        string Date();
        DateTime DateAndTime();
        void DecreaseVolume();
        void DeleteGrammar();
        void DesactiveRandomColor();
        void DictationMode();
        void DirectColor(byte r, byte g, byte b);
        void DirectColor(System.Drawing.Color color);
        void DirectColor(string color);
        void Exit();
        Camera.FaceResult FaceDetect();
        void Forward();
        System.Collections.Generic.List<string> GetAllAlbums();
        System.Collections.Generic.List<string> GetAllAuthors();
        System.Collections.Generic.List<string> GetAllGenres();
        System.Collections.Generic.List<string> GetAllSongs();
        string GetConfigCamera();
        Camera.LastResults GetLastResults();
        double GetRoomIluminance();
        int GetVolume();
        void GradientColor(byte r, byte g, byte b, int timeMillis);
        void GradientColor(System.Drawing.Color color, int timeMillis);
        void GradientColor(string colorName, int timeMillis);
        int Humidity(string city);
        void IncreaseVolume();
        string InfoAlbum();
        string InfoAuthor();
        string InfoDuration();
        global::Media.MusicMedia InfoMedia();
        global::Media.MusicMedia InfoPlayList();
        string InfoTitle();
        void LoadAlbum(string nameAlbum);
        void LoadAllMedia();
        void LoadAuthor(string nameArtist);
        void LoadGenre(string nameGenre);
        void LoadGrammar();
        void LoadGrammarList(System.Collections.Generic.List<string> list, string context);
        void LoadMediaUrl(string url);
        void LoadTitle(string nameSong);
        void MaximumVolume();
        void MinimumVolume();
        void Mute();
        int NumberFacesDetect();
        void Pause();
        void Play();
        void RandomColor(bool active, int timeMillis);
        void RandomColor(int timeMillis);
        void Rewind();
        void Speak(string speakText);
        void StartProcessImage();
        void Stop();
        void StopProcessImage();
        void SwitchOffDevice(int device);
        void SwitchOnDevice(int device);
        int Temperature(string city);
        int TemperatureFahrenheit(string city);
        string Time();
        void TurnOffLight();
        void TurnOnLight();
        string WindDirection(string city);
        int WindSpeed(string city);
    }
}
